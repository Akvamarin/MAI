import networkx as nx
import numpy as np
from matplotlib import pyplot as plt
import os
import warnings
import math
from Analysis.Constants import *
FREQ, WEIGHT = 'freq', 'weight'


class GraphAnalyzer:
    def __init__(self, graph, results_dir = os.path.join(RESULTS_DIR, GRAPHS_FOLDER_NAME)):
        self.graph = graph
        self.results_dir = results_dir

    def get_subgraph(self, minimum_edge_weight_percentage=0.01, weight=WEIGHT):
        max_edge_weight = max(nx.get_edge_attributes(self.graph, weight).values())
        min_allowed_weight = int(math.ceil(max_edge_weight*minimum_edge_weight_percentage))
        valid_edges = [(u, v) for u, v, data in self.graph.edges(data=True) if data[weight] >= min_allowed_weight]
        valid_nodes = np.unique(valid_edges)
        return nx.subgraph(self.graph, nbunch=valid_nodes)

    def plot_graph(self, layout=nx.planar_layout, minimum_ploteable_weight_percentage=0.01, file_name='Graph',
                   weight=WEIGHT, print_labels=True, node_color='pink',
                   node_color_label='Node Relevance', node_size=20, font_size=3):
        """
        Plots (or saves) the network stored in self.graph.
        :param layout: Layout of the nodes of the represented network.
        :param alg_name: String. Name of the model used to generate the network.
        :param save_at: String. Location to store the plot generated by this function.
        """
        if minimum_ploteable_weight_percentage > 0.:
            file_name += ' - Min Rel - {rel}%'.format(rel=int(round(minimum_ploteable_weight_percentage*100)))
        graph = self.get_subgraph(minimum_edge_weight_percentage=minimum_ploteable_weight_percentage, weight=WEIGHT)
        if len(graph.edges) == 0:
            return None
        elif layout == nx.planar_layout and not nx.check_planarity(graph)[0]:
            layout = nx.spring_layout

        # Define the plot of the network and its characteristics (pink nodes with 95% of opacity and without labels)
        nodes_degree = np.array([graph.degree[node] for node in graph.nodes])
        node_size = (nodes_degree / np.max(nodes_degree)) * 80 + node_size
        edge_intensity = np.array([weight for u, v, weight in graph.edges(data=weight)])
        edge_color = [plt.cm.Blues(color) for color in edge_intensity / np.max(edge_intensity)]
        if node_color in (FREQ,):
            node_color = list(nx.classes.get_node_attributes(graph, name=FREQ).values())
        if type(node_color) is not str:
            max_color_value, min_color_value = max(node_color), min(node_color)
            node_color = [plt.cm.Reds(color/max_color_value) for color in node_color]

        nx.draw_networkx(graph, pos=layout(G=graph), with_labels=print_labels, node_color=node_color,
                         alpha=0.8, node_size=node_size, width=1.,
                         edge_color=edge_color, font_size=font_size)
        # Remove the black borders of the plot of the network
        [plt.axes().spines[side].set_color('white') for side in plt.axes().spines.keys()]

        sm = plt.cm.ScalarMappable(cmap=plt.cm.Blues,
                                   norm=plt.Normalize(vmin=np.min(edge_intensity), vmax=np.max(edge_intensity)))
        sm._A = []
        plt.colorbar(sm).set_label('Edge {val}'.format(val=weight.title()))
        if type(node_color) is not str:
            sm = plt.cm.ScalarMappable(cmap=plt.cm.Reds,
                                       norm=plt.Normalize(vmin=max_color_value, vmax=min_color_value))
            sm._A = []
            plt.colorbar(sm).set_label(node_color_label)

        plt.title(file_name + '. ({usedodes}/{orignodes} Nodes)'.format(usedodes=len(graph), orignodes=len(self.graph)))

        plt.tight_layout()  # Avoid the lengthy titles to be cut

        # Show or save the plot
        if self.results_dir is None:  # Show the plot if the title of the file is not given
            plt.show()
        else:
            if not os.path.isdir(self.results_dir):
                os.makedirs(self.results_dir)
            plt.savefig(os.path.join(self.results_dir, file_name.replace('%', '') + '.png'), dpi=440)

        plt.close()